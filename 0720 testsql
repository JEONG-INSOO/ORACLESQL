/*CREATE USER c##sqltest3 IDENTIFIED BY sqltest3 DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp PROFILE DEFAULT;
GRANT CONNECT, RESOURCE TO c##sqltest3;
GRANT CREATE VIEW, CREATE SYNONYM TO c##sqltest3;
GRANT UNLIMITED TABLESPACE TO c##sqltest1;
ALTER USER c##sqltest3 ACCOUNT UNLOCK;

DROP TABLE BOOK;
DROP TABLE CUSTOMER;
DROP TABLE ORDERS;

CREATE TABLE Book (
bookid NUMBER(2) PRIMARY KEY,
bookname VARCHAR2(40),
publisher VARCHAR2(40),
price NUMBER(8)
);

CREATE TABLE Customer (
custid NUMBER(2) PRIMARY KEY,
name VARCHAR2(40),
address VARCHAR2(50),
phone VARCHAR2(20)
);

CREATE TABLE Orders (
orderid NUMBER(2) PRIMARY KEY,
custid NUMBER(2) REFERENCES Customer(custid),
bookid NUMBER(2) REFERENCES Book(bookid),
saleprice NUMBER(8),
orderdate DATE
);

/* Book, Customer, Orders 데이터 생성 
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);

INSERT INTO Customer VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO Customer VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO Customer VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES (5, '박세리', '대한민국 대전', NULL);

INSERT INTO Orders VALUES (1, 1, 1, 6000, TO_DATE('2020-07-01','yyyy-mm-dd'));
INSERT INTO Orders VALUES (2, 1, 3, 21000, TO_DATE('2020-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, TO_DATE('2020-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (4, 3, 6, 6000, TO_DATE('2020-07-04','yyyy-mm-dd'));
INSERT INTO Orders VALUES (5, 4, 7, 20000, TO_DATE('2020-07-05','yyyy-mm-dd'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, TO_DATE('2020-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, TO_DATE('2020-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, TO_DATE('2020-07-08','yyyy-mm-dd'));
INSERT INTO Orders VALUES (9, 2, 10, 7000, TO_DATE('2020-07-09','yyyy-mm-dd'));
INSERT INTO Orders VALUES (10, 3, 8, 13000, TO_DATE('2020-07-10','yyyy-mm-dd'));

CREATE TABLE Imported_Book (
bookid NUMBER,
bookname VARCHAR(40),
publisher VARCHAR(40),
price NUMBER(8)
);

INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);

COMMIT;*/

  set serveroutput on;
-- 1. 대한민국에 거주하는 고객의 고객명,주소, 연락처를 보이는 프로시저를 작성하고 동작됨을 보이시오 (배점 10점)
  CREATE or REPLACE procedure test_1
  as
  cursor c1 is select *
                 from customer
                where address like '%대한민국%';
  begin
      for rec in c1 loop
       dbms_output.put_line(rec.name    || ' ' ||
                            rec.address || ' ' ||
                            rec.phone);
       end loop;
       exception
           when others then
               dbms_output.put_line(SQLCODE||'-'||SQLERRM); 
  end;

  exec test_1;
-- 2. 도서 테이블에 동일도서(출판사, 책이름이 동일)가 있으면 도서의 가격만 새롭게 변경하고 그렇지 않으면 새로운 행을 삽입하는 프로시저를 작성하고 동작됨을 보이시오 (배점 10점)
  CREATE or REPLACE procedure test_2(
   l_bookid      book.bookid   %type 
,  l_bookname    book.bookname %type
,  l_publisher   book.publisher%type
,  l_price       book.price    %type
  )
  as
   p_bookid      book.bookid   %type;
   limlit_bookid book.bookid   %type;
  begin
--
  begin
    select bookid into p_bookid
      from book
     where bookname  = l_bookname
       and publisher = l_publisher;
  exception
    when no_data_found then
         p_bookid := 0;
    end;
--
  begin 
    select max(bookid)+1 into limlit_bookid
      from book;
  exception
    when no_data_found then
         limlit_bookid := 1;  
    end;
    if(p_bookid = 0) then
        INSERT into book(bookid,bookname,publisher,price)
        VALUES(limlit_bookid,l_bookname,l_publisher,l_price);
    else
        UPDATE book
           set price = l_price
         where bookid = p_bookid;
    end if;
  end;
  
  CREATE SEQUENCE bookid_gogo
         INCREMENT BY 1
         START WITH 1
         MAXVALUE 999999
         MINVALUE 1
         NOCYCLE
         NOCACHE;
  
  select *
    from book;
  exec test_2(bookid_gogo.NEXTVAL,'데이터베이스3','KH정보교육원',17000);  
  exec test_2(bookid_gogo.NEXTVAL,'축구의 역사','굿스포츠',8000);
  
-- 3. 특정 고객의 주문 총액을 계산하여 3만원 이상이면 '우수' 3만원 미만이면 일반을 반환하는 함수 grade()를 작성하고 동작됨을 보이시오. (배점 10점)
  CREATE or REPLACE FUNCTION grade(
  l_custid in number
  )
  return varchar2
  is
    l_grade varchar2(10);
  begin
    select 
    case 
        when sum(orders.saleprice) >= 30000 
        then
          '우수' 
        else
          '일반' 
     end into l_grade
      from orders
     where orders.custid = l_custid;
    return l_grade;
  end;

  select grade(5)
    from dual;

-- 4. 3번문에에서 작성한 사용자정의 함수 grade()를 호출하여 고객의 이름과 등급을 보이는 SOL문을 작성하고 실행결과를 보이시오(배점 10점)
  select name "이름", grade(custid)"등급"
    from customer;

-- 5. 고객별로 도서를 몇 권 구입 했는지와 총구매액을 보이는 프로시저를 작성하고 동작됨을 보이시오(배점 15점)

  CREATE or REPLACE procedure test_5
  as
    cursor c1 is (select custid "고객번호" , count(orderid) as "도서 권 수", sum(saleprice) "총 구매액"
                    from orders
                group by custid);
  begin
    for rec in c1 loop
     dbms_output.put_line(rec."고객번호" || ' ' || rec."도서 권 수" || ' ' || rec."총 구매액");
    end loop;
    exception
        when others then
            dbms_output.put_line(SQLCODE||'-'||SQLERRM);
  end;  
 
  exec test_5;
-- 6. 고객이 주문한 내용의 변경이 발생할 경우 로그테이블에 변경전 변경후 데이터를 기록하는 트리거를 작성하고 동작됨을 보이시오(배점 25점 - 테이블 7점, 시퀸스 3점, 트리거 15점)
    -- [요구사항] 
    -- 1. 로그 테이블명: orders log
    -- 2. 순차기록을 위한 no속성 추가하고 시퀀스 사용할 것 (시퀸스명: orders_log_no_seq)
    -- 3. 변경일시를 기록하기 위한 update 속성이 추가
    -- 4. 주문번호 기준으로 변경 전후 내역이 기록되어야한다.
DROP TABLE ORDERS_LOG;
CREATE table orders_log(
   seq       number PRIMARY KEY 
,  b_orderid   number(2)
,  b_custid    number(2)
,  b_bookid    number(2)
,  b_saleprice number(8)
,  b_orderdate date
,  a_orderid   number(2) 
,  a_custid    number(2)
,  a_bookid    number(2)
,  a_saleprice number(8)
,  a_orderdate date
,  udate      date
,  gubun     varchar2(10)
   );
commit;
CREATE SEQUENCE orders_log_no_seq
   INCREMENT BY 1
   START WITH 1
   MAXVALUE 999999
   MINVALUE 1
   NOCYCLE
   NOCACHE;
DROP SEQUENCE orders_log_no_seq;
CREATE or REPLACE trigger orders_log_tr
   AFTER INSERT or UPDATE or DELETE on orders
   REFERENCING OLD AS o NEW AS n 
   FOR EACH ROW
BEGIN
   IF INSERTING THEN
      INSERT INTO orders_log
      VALUES(orders_log_no_seq.NEXTVAL,:o.orderid,:o.custid,:o.bookid,:o.saleprice,:o.orderdate
,                                      :n.orderid,:n.custid,:n.bookid,:n.saleprice,:n.orderdate
,            SYSDATE,'INSERTING');
   ELSIF UPDATING THEN
      INSERT INTO orders_log
      VALUES(orders_log_no_seq.NEXTVAL,:o.orderid,:o.custid,:o.bookid,:o.saleprice,:o.orderdate
,                                      :n.orderid,:n.custid,:n.bookid,:n.saleprice,:n.orderdate
,            SYSDATE,'UPDATING');
   ELSIF DELETING THEN
      INSERT INTO orders_log
      VALUES(orders_log_no_seq.NEXTVAL,:o.orderid,:o.custid,:o.bookid,:o.saleprice,:o.orderdate
,                                      :n.orderid,:n.custid,:n.bookid,:n.saleprice,:n.orderdate
,            SYSDATE,'DELETING');
   END IF;
END;

insert into orders
values (12,1,1,13000,sysdate);

update orders
   set custid = 5, bookid = 6, saleprice=13000, orderdate = timestamp '2023-07-20 00:00:00.000000'
 where orderid = 9;

DROP TRIGGER orders_trigger;
select    
   seq         "순번"
,  b_orderid   "변경 전 주문번호"
,  b_custid    "변경 전 고객번호"
,  b_bookid    "변경 전 도서번호"
,  b_saleprice "변경 전 판매가격"
,  b_orderdate "변경 전 주문일자"
,  a_orderid   "변경 후 주문번호"
,  a_custid    "변경 후 고객번호"
,  a_bookid    "변경 후 도서번호"
,  a_saleprice "변경 후 판매가격"
,  a_orderdate "변경 후 주문일자"
,  udate       "최근 변경시간"
,  gubun       "구분"
  from orders_log;
-- 7. 그룹함수를 이용하여 출판사별 고객별 판매액을 소계와 총계가 보이도록 DML문을 작성하고 실행해 보이시오.(배점 10점)
   select t2.publisher       "출판사 명"
,         t1.custid          "고객번호"
,         sum(t1.saleprice)  "총 판매액"
     from orders t1
left join book t2 on t1.bookid = t2.bookid
 group by rollup(t2.publisher, t1.custid);

-- 8. 윈도우 함수를 이용하여 출판사별 총판매금액, 판매순위를 산출하는 DML문 작성하고 실행해 보이시오.(배점 10점)
   select t2.publisher "출판사명"
,         sum(t1.saleprice) "총 판매액"
,         dense_rank() over (order by sum(saleprice)) "순위"
     from orders t1 left join book t2 on t1.bookid = t2.bookid
 group by t2.publisher;